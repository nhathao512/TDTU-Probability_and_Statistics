# -*- coding: utf-8 -*-
"""Lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5P2ZR-EoD-OwkNSJETBWSnKW41HYDHv
"""

#Exercise1
#a
import random
count = 0
n = 1000000
for i in range(n):
  die1 = random.randint(1, 6)
  die2 = random.randint(1, 6)
  if die1 == die2:
    count += 1
print("Xac xuat hai vien giong nhau: ", count/n)
#b
import random
count = 0
n = 1000000
for i in range(n):
  die1 = random.randint(1, 6)
  die2 = random.randint(1, 6)
  if die1 != die2:
    count += 1
print("Xac xuat hai vien khac nhau: ", count/n)
#c
import random
count = 0
n = 1000000
for i in range(n):
  die1 = random.randint(1, 6)
  die2 = random.randint(1, 6)
  if (die1 % 2 == 1) and (die2 % 2 == 1):
    count += 1
print("Xac xuat hai vien cung le: ", count/n)

#Exercise2
from fractions import Fraction
import itertools
import random

def P(event , space):
 return Fraction(len(event & space), len(space))

def cross(A, B):
  return {a + b for a in A for b in B}

urn = cross('W', '12345') | cross('B', '12') | cross('R', '123')
print(urn)

def P(event , space):
 return Fraction(len(event & space), len(space))

def combos(items , n):
  return {' '.join(combo) for combo in itertools.combinations(items , n)}

U3 = combos(urn, 3)
#a
trang = {s for s in U3 if s.count('W') == 3}
do = {s for s in U3 if s.count('R') == 3}
cungmau = (P(trang, U3)) + (P(do, U3))
print("Xac suat ca ba vien cung mau: ",cungmau)
#b
khacmau = {s for s in U3 if s.count('B') == 1 and s.count('W') == 1 and s.count('R') == 1}
print("Xac suat ca ba vien khac mau: ",P(khacmau , U3))
#d
r2w1 = {s for s in U3 if s.count('W') == 1 and s.count('R') == 2}
print("Xac suat de co 2 bi do va 1 bi trang: ",P(r2w1 , U3))

#Exercise3
from traitlets.traitlets import All
from itertools import product
import random

Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))
#a
def simulator_poker1(n):
  count = 0
  for i in range(n):
    count1 = 0
    count2 = 0
    count3 = 0
    count4 = 0
    pick = (random.sample(Cards, 4))
    for j in pick:
      if (j[1] == '♡'):
        count1 += 1
    for j in pick:
      if (j[1] == '♢'):
        count2 += 1
    for j in pick:
      if (j[1] == '♣'):
        count3 += 1
    for j in pick:
      if (j[1] == '♠'):
        count4 += 1
    if (count1 == 4 or count2 == 4 or count3 == 4 or count4 == 4):
      count += 1
  return count/n
print("Xac suat bon la cung chat: ",simulator_poker1(10000))
#b
def simulator_poker2(n):
  count = 0
  for i in range(n):
    pick = (random.sample(Cards, 4))
    suit = pick[0][1] + pick[1][1] + pick[2][1] + pick[3][1]

    if (len(set(suit)) == 4):
        count += 1
  return count/n
print("Xac suat bon la doi mot khac chat: ",simulator_poker2(10000))

#c
def simulator_poker3(n):
  count = 0
  for i in range(n):
    count1 = 0
    count2 = 0
    pick = (random.sample(Cards, 4))
    for j in pick:
      if (j[1] == '♡' or j[1] == '♢'):
        count1 += 1
    for j in pick:
      if (j[1] == '♣' or j[1] == '♠'):
        count2 += 1
    if (count1 == 4 or count2 == 4):
      count += 1
  return count/n
print("Xac suat bon la cung mau: ",simulator_poker3(10000))

#Exercise4
from fractions import Fraction
import itertools
import random

def P(event , space):
 return Fraction(len(event & space), len(space))

def cross(A, B):
  return {a + b for a in A for b in B}
#a
urn = cross('W', '12') | cross('B', '123') | cross('R', '1234')
print(urn)

def P(event , space):
 return Fraction(len(event & space), len(space))

def combos(items , n):
  return {' '.join(combo) for combo in itertools.combinations(items , n)}
#b
U3 = combos(urn, 3)
print(U3)
#c
w1b1r1 = {s for s in U3 if s.count('B') == 1 and s.count('W') == 1 and s.count('R') == 1}
print(w1b1r1)

from sys import set_asyncgen_hooks
#Exercise5
from traitlets.traitlets import All
from itertools import product
from itertools import combinations
import random
#a
sanh1 = 10
combin = len(list(combinations(range(52), 5)))
xslt = sanh1 / combin
print("Xac suat ly thuyet: ", xslt)

#b
Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13} #gan J =11, Q = 12, K = 13
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))

def sanh2(pick):
    pick = sorted(pick, key = lambda x: x[0])
    for i in range(1, len(pick)):
        if pick[i][0] != pick[i-1][0] + 1:
            return False
    return True

def xstn(n):
    count = 0
    for _ in range(n):
        random_pick = random.sample(Cards, 5)
        if sanh2(random_pick):
            count += 1
    probability = count / n
    return probability

print("Xac suat thuc nghiem:", xstn(10000))

#Exercise6
E = {0,1,2,3,4,5}
#a
digit1 = []
for i in E:
  if (i != 0):
    for j in E:
      for k in E:
        num1 = i*100 + j*10 + k
        digit1.append(num1)
print("Cac so co 3 chu so: ", digit1)

#b
digit2 = []
for i in E:
  if(i != 0):
    for j in E:
      if (j != i):
        for k in E:
          if (k != j and k != i):
            for h in E:
              if (h != i and h != j and h != k):
                num2 = i*1000 + j*100 + k*10 + h
                digit2.append(num2)
print("Cac so co 4 chu so: ", digit2)