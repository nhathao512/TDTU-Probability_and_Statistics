# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NEOKDKQFWNpeIkQ8tWIWANNnp0EaXjjS
"""

#Exercise1
import random
import math

#a
x = []
for i in range(10000):
    x.append(random.randint(1, 6) + random.randint(1, 6))

#b
X = set(x)
print(X)

#c
P = [x.count(s) / len(x) for s in x]
print(P)

#d
def Expectation(X, P):
    EX = 0
    for i in X:
        EX = EX + i * P[i - 1]
    return EX

def Variance(X, P, mu):
    Var = 0
    for i in X:
        Var = Var + math.pow(i - mu, 2) * P[i - 1]
    return Var

def Standard_deviation(Variance):
    return math.sqrt(Variance)


Expectation = Expectation(X, P)
print(Expectation)

Variance = Variance(X, P, Expectation)
print(Variance)

Standard_deviation = Standard_deviation(Variance)
print(Standard_deviation)

#Exercise2
import matplotlib.pyplot as plt
import math
import random

def pmf_normal(x, mu, sigma):
    pmf = 1/math.sqrt(2*math.pi*math.pow(sigma, 2)) * math.exp(-math.pow(x-mu, 2)/2*math.pow(sigma, 2))
    return pmf

def cdf_normal(x, mu, sigma):
    cdf = 1/2*(1*math.erf((x-mu)/sigma*pow(2, 1/2)))
    return cdf

def generator_data(a, b, size):
    n = (b - a) / (size - 1)
    result = []
    s = a
    while s < b:
        result.append(s)
        s = s + n
    if len(result) < size:
        result.append(b)
    return result

#a
def plot_pmf_normal(mu, sigma):
    X = generator_data(mu - 4 * sigma, mu + 4 * sigma, 1000)
    Pmf = [pmf_normal(x, mu, sigma) for x in X]
    plt.plot(X, Pmf, "-")
    plt.title("PMF of Normal(%.2f, %.2f)"% (mu, sigma))
    plt.xlabel("X")
    plt.ylabel("P")
    plt.show()
plot_pmf_normal(0, 1.5)

#b
def plot_cdf_normal(mu, sigma):
    X = generator_data(mu - 4 * sigma, mu + 4 * sigma, 1000)
    Cdf = [cdf_normal(x, mu, sigma) for x in X]
    plt.plot(X, Cdf, "-")
    plt.title("CDF of Normal(%.2f, %.2f)"% (mu, sigma))
    plt.xlabel("X")
    plt.ylabel("P")
    plt.show()
plot_cdf_normal(0, 1.5)

#c
cdf_7 = cdf_normal(7, 3, 4)
cdf_2 = cdf_normal(2, 3, 4)
print("2 < P < 7 = %.4f"%(cdf_7 - cdf_2))

#Exercise3
import matplotlib.pyplot as plt
import math
import pandas as pd
from google.colab import files
uploaded = files.upload()
data = pd.read_csv("company-sales_data.csv")

month = data['month_number']
toothpaste = data['toothpaste']
shampoo = data['shampoo']
facecream = data['facecream']

plt.plot(month, toothpaste)
plt.plot(month, shampoo)
plt.plot(month, facecream)
plt.legend(['toothpaste', 'shampoo', 'facecream'])
plt.xlabel('Month')
plt.ylabel('Units')
plt.show()

#Exercise4
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
import re
from google.colab import files

uploaded = files.upload()
ftext = 'text.txt'
with open(ftext, 'r') as file:
    text = file.read()

words = re.findall(r'\w+', text.lower())

word_counts = {}
for word in words:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1

sorted_word_counts = sorted(word_counts.items(), key = lambda x: x[1], reverse = True)

top_30_words = sorted_word_counts[:30]
words, counts = zip(*top_30_words)

w = [word for word, count in top_30_words for _ in range(count)]

plt.hist(w, bins = 30)
plt.title("Histogram of Result")
plt.xlabel('Words')
plt.ylabel('No. of word')
plt.xticks(rotation = 90)
plt.show()