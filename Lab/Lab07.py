# -*- coding: utf-8 -*-
"""Lab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aSA8YFqJs3NSEr4XECQTEK8oddG2SK5C
"""

import matplotlib.pyplot as plt
import math

def generator_data (a, b, size):
  n = (b-a)/(size-1)
  result = []
  s = a;
  while s < b:
    result.append(s)
    s = s+n;
  if len(result) < size:
    result.append(b)
  return result
X = generator_data(4, 6, 100)
print(X)

#Uniform distribution
import matplotlib.pyplot as plt
import math
def generator_data (a, b, size):
  n = (b-a)/(size-1)
  result = []
  s = a;
  while s < b:
    result.append(s)
    s = s+n;
  if len(result) < size:
    result.append(b)
  return result

def pmf_uniform_cont(a, b):
  return a / (b-a)

def plot_pmf_uniform_cont(a, b):
  X = generator_data(a, b, 100)
  if b != a:
    P = [pmf_uniform_cont(a, b) for x in X]
  plt.plot(X, P, '-')
  plt.plot([a, a], [0, 1/(b-a)], 'g--')
  plt.plot([b, b], [0, 1/(b-a)], 'g--')

  plt.title('PDF of Uniform continuous distribution(%0.2f, %0.2f)'%(a,b))
  plt.show()
plot_pmf_uniform_cont(4, 6)

#Normal disribution
import matplotlib.pyplot as plt
import math

def generator_data (a, b, size):
  n = (b-a)/(size-1)
  result = []
  s = a;
  while s < b:
    result.append(s)
    s = s+n;
  if len(result) < size:
    result.append(b)
  return result

def pmf_normal(x, mu, sigma):
  u = (x-mu)/abs(sigma)
  y = (1/(math.sqrt(2*math.pi)*abs(sigma)))*math.exp(-u*u/2)
  return y

def cdf_normal(x, mu, sigma):
  t = x-mu;
  y = 0.5*math.erfcc(-t/(sigma*math.sqrt(2.0)));
  if y>1.0:
    y = 1.0;
  return y

def plot_pmf_normal(mu, sigma):
  X = generator_data(mu - 4*sigma, mu + 4*sigma, 100)
  P_normal = [pmf_normal(x, mu, sigma) for x in X]
  plt.plot(X, P_normal, '-')
  plt.title('PMF of Normal(%.2f, %.2f)'%(mu,sigma))
  plt.xlabel('X')
  plt.xlabel('Y')
  plt.show()
plot_pmf_normal(0, 1.5)

#Exercise 1:
import matplotlib.pyplot as plt
import math

def generator_data (a, b, size):
  n = (b-a)/(size-1)
  result = []
  s = a;
  while s < b:
    result.append(s)
    s = s+n;
  if len(result) < size:
    result.append(b)
  return result

def cdf_normal(x, mu, sigma):
  t = x-mu;
  y = 0.5*math.erfc(-t/(sigma*math.sqrt(2.0)));
  if y>1.0:
    y = 1.0;
  return y

def plot_cdf_normal(mu, sigma):
  X = generator_data(mu - 4*sigma, mu + 4*sigma, 100)
  P_normal = [cdf_normal(x, mu, sigma) for x in X]
  plt.plot(X, P_normal, '-')
  plt.title('CDF of Normal(%.2f, %.2f)'%(mu,sigma))
  plt.xlabel('X')
  plt.xlabel('Y')
  plt.show()
plot_cdf_normal(0, 1.5)

#Exercise 2:
import matplotlib.pyplot as plt
import math

def generator_data (a, b, size):
  n = (b-a)/(size-1)
  result = []
  s = a;
  while s < b:
    result.append(s)
    s = s+n;
  if len(result) < size:
    result.append(b)
  return result

def cdf_normal(x, mu, sigma):
  t = x-mu;
  y = 0.5*math.erfc(-t/(sigma*math.sqrt(2.0)));
  if y>1.0:
    y = 1.0;
  return y

P = cdf_normal(12, 10, 1) - cdf_normal(9, 10, 1)
print(P)