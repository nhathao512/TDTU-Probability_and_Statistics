# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zGMR_M6_awTybIS8M_rj74dk0m-GjvS_
"""

#Define function P
from fractions import Fraction

def P(event , space):
 return Fraction(len(event & space), len(space))

D = {1, 2, 3, 4, 5, 6}
even = {2, 4, 6}

print(P(even, D))

#Urn Problems

def cross(A, B):
  return {a + b for a in A for b in B}

urn = cross('W', '12345678') | cross('B', '123456') | cross('R', '123456789')
print(urn)

def P(event , space):
 return Fraction(len(event & space), len(space))

import itertools

def combos(items , n):
  return {' '.join(combo) for combo in itertools.combinations(items , n)}

U6 = combos(urn, 6)

print(len(U6))

import random
print(random.sample(U6, 10))

red6 = {s for s in U6 if s.count('R') == 6}
print(P(red6, U6))

b3w2r1 = {s for s in U6 if s.count('B') == 3 and s.count('W') == 2 and s.count('R') == 1}
print(P(b3w2r1 , U6))

w4 = {s for s in U6 if s.count('W') == 4}
print(P(w4, U6))

#Coin experiment
import random
n = 10
count = 0
for simulations in range(n):
  tosses = random.randint(0, 1)
if tosses == 1:
  count += 1
print(count/n)

#Dices experiment
import random
count = 0
n = 1000000
for i in range(n):
  die1 = random.randint(1, 6)
  die2 = random.randint(1, 6)
  if die1==1 and die2==6:
    count += 1
print(count/n)

#Cards experiment
from itertools import product

Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))
print(len(Cards))
print(Cards[:10])

def simulator_poker(n):
  count = 0
  for i in range(n):
    index = random.randint(0, 51)
    if Cards[index][1] == '♡' or Cards[index][1] == '♢':
      count += 1
  return count/n

print(simulator_poker(10))
print(simulator_poker(100))
print(simulator_poker(1000))
print(simulator_poker(10000))

#Exercises 1
def simualtor_dice1(n):
  count = 0
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 % 2 == 0) and (die2 % 2 == 0):
      count += 1
  return(count/n)
print(simualtor_dice1(10))
print(simualtor_dice1(100))
print(simualtor_dice1(1000))
print(simualtor_dice1(10000))

#Exercises 2
def simualtor_dice2(n):
  count = 0
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if ((die1 % 2 == 0) and (die2 % 2 == 1)) or ((die1 % 2 == 1) and (die2 % 2 == 0)):
      count += 1
  return(count/n)
print(simualtor_dice2(10))
print(simualtor_dice2(100))
print(simualtor_dice2(1000))
print(simualtor_dice2(10000))

#Exercises 3
def simualtor_dice3(n):
  count = 0
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if (die1 == die2):
      count += 1
  return(count/n)
print(simualtor_dice3(10))
print(simualtor_dice3(100))
print(simualtor_dice3(1000))
print(simualtor_dice3(10000))

#Exercises 4
def simualtor_dice4(n):
  count = 0
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if die1==1 and die2==6:
      count += 1
  return(count/n)
print(simualtor_dice3(10))
print(simualtor_dice3(100))
print(simualtor_dice3(1000))
print(simualtor_dice3(10000))

#Exercises 5
def simualtor_dice5(n):
  count = 0
  for i in range(n):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    if ((die1 + die2) > 6):
      count += 1
  return(count/n)
print(simualtor_dice3(10))
print(simualtor_dice3(100))
print(simualtor_dice3(1000))
print(simualtor_dice3(10000))

#Exercises 6
from traitlets.traitlets import All
from itertools import product
import random

Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))

def simualtor_poker1(n):
  count = 0
  for i in range(n):
    count1 = 0
    pick = (random.sample(Cards, 5))
    for j in pick:
      if (j[1] == '♡'):
        count1 += 1
    if (count1 == 5):
      count += 1
  return count/n

print(simualtor_poker1(10))
print(simualtor_poker1(100))
print(simualtor_poker1(1000))
print(simualtor_poker1(10000))

#Exercises 7
from traitlets.traitlets import All
from itertools import product
import random

Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}
Suits = {'♡', '♢', '♣', '♠'}
Cards = list(product(Ranks , Suits))

def simualtor_poker2(n):
  count = 0
  for i in range(n):
    pick = (random.sample(Cards, 5))
    suit = pick[0][1] + pick[1][1] + pick[2][1] + pick[3][1]

    if (len(set(suit)) == 4):
        count += 1
  return count/n

print(simualtor_poker2(10))
print(simualtor_poker2(100))
print(simualtor_poker2(1000))
print(simualtor_poker2(10000))

#Exercises 8
def cross(A, B):
  return {a + b for a in A for b in B}

urn = cross('W', '12345678') | cross('B', '123456') | cross('R', '123456789')
print(urn)

def P(event , space):
 return Fraction(len(event & space), len(space))

import itertools

def combos(items , n):
  return {' '.join(combo) for combo in itertools.combinations(items , n)}

U6 = combos(urn, 6)

print(len(U6))

import random
print(random.sample(U6, 6))

w2b2r2 = {s for s in U6 if s.count('W') == 2 and s.count('B') == 2 and s.count('R') == 2}
print(P(w2b2r2 , U6))